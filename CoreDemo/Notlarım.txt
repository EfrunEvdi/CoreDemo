# 1 Ders (Giriş)

# 2 Ders (Başlamadan Önce Bilinmesi Gerekenler)
-> 50 derste MVC
-> 50 derste Tatil Projesi
-> MVC Proje Kampı

# 3 Ders (Yeni Proje Oluşturma)
CoreDemo adlı Asp.Net 5.0 MVC projesini oluşturuyoruz.
Ufak tefek default olarak gelen MVC ile tanıtım yapıldı.

# 4 Ders (View Ve Layout)
Bu derste HomeController'da ve bu controller'a bağlı bir View'de sistami daha iyi anlayabilmemiz için bir kaç kod yazdık.

# 5 Ders (Katmanlı Mimariye Bakış Ve N Tier Architecture)
*** Katmanlı Mimari ***
- Kod tekrarını önleme ("DRY" Don't Repeat Yourself)
- Projeye olan hakimiyet artar.
- Kod okunaklığı artar.
- Clean Code yapısı sağlanır.
- Hata yönetimi kolaylaşır.

*** N Tier Architecture ***
-> Entitiy Layer
	* Tablo ve sütunları oluşturduğumuz katmandır.

-> DataAccess Layer
	* CRUD operasyonlarının temelini oluşturcak yapıyı kullanıcaz.
	* CRUD (CREAT-READ-UPDATE-DELETE)
-> Business Layer
	* Validasyonların yapıldıığı katmandır.
-> Presentation Layer
	* Sunum (UI) oluşturulduğu katmandır.
-> Core Layer
-> API

# 6 Ders (Katmanların Oluşturulması)
Solition üstüne sağ tık Add New Project deyip Class Library seçiyoruz ve sırayla şu katmanları dahil ediyoruz.
-> EntityLayer
-> DataAccessLayer
-> BusinessLayer
-> CoreLayer

# 7 Ders (Entitylerin Oluşturulması Category - Blog)
EntityLayer içine new folder Concrete ve içine class;
-> Category (İçine propertyleri tanımlıyoruz.)
-> Blog (İçine propertyleri tanımlıyoruz.)

# 8 Ders (Entitylerin Oluşturulması Writer - Comment - About - Contact)
Entity/Concrete içine;
-> Writer (İçine propertyleri tanımlıyoruz.)
-> Comment (İçine propertyleri tanımlıyoruz.)
-> Contact (İçine propertyleri tanımlıyoruz.)
-> About (İçine propertyleri tanımlıyoruz.)

# 9 Ders (Entity Framework Core Paketleri)
İlk olarak tüm entitylere [Key] ettiribütünü yazdık. Daha sonra DataAccessLayer içine;
-> Microsoft.EntityFrameworkCore (5.0.9)
-> Microsoft.EntityFrameworkCore.Design (5.0.9)
-> Microsoft.EntityFrameworkCore.SqlServer (5.0.9)
-> Microsoft.EntityFrameworkCore.Tools (5.0.9)
paketlerini yüklüyoruz.

Ardında bu katmana Abstract, Concrete ve Repositories klasörünü ekliyoruz. Ardından Concrete içine Context classını ekliyoruz.

# 10 Ders (Connection String Ve Context Sınıfı)
Bu derste açtığımız Context sınıfının içine Database'miz olacak CoreBlogDB adlı database oluşturmak için kodlarımızı yazdık.

# 11 Ders (Referansların Tanımlanması Ve Context Dbset Propertyleri)
Referans verme işlemi için(Katmana sağ tık Add - Project Referance); 
EntityLayer --> Referans tanımlanmayacak.
DataAccessLayer --> EntityLayer
BusinessLayer --> EntityLayer + DataAccessLayer
PresentationLayer --> EntityLayer + DataAccessLayer + BusinessLayer

Referans verme işlemi ardından Context içine tablolarımı Dbset ile tanımladık.

# 12 Ders (Migration İşlemleri)
Migration işlemi yapabilmek için öncelikle PresentationLayer'a 
-> Microsoft.EntityFrameworkCore (5.0.9)
-> Microsoft.EntityFrameworkCore.Design (5.0.9)
-> Microsoft.EntityFrameworkCore.SqlServer (5.0.9)
-> Microsoft.EntityFrameworkCore.Tools (5.0.9)
paketlerini yüklüyoruz.

Ardından Package Manager Console'da add-migration ve update-database yaparak ilk migration'unumuzu oluşturuyoruz.

# 13 Ders (İlişkilerin Eklenmesi Add Migration İşlemleri)
Bu derste ilk olarak Blog ve Category tablolarını birbirleri ile ilşkilendirdik. Ardından Comment ve Blog arasındaki ilişkiyi oluşturduk.

# 14 Ders (Interfacelerin Tanımlanması)
- Her bir CRUD operasyonuna ait metot tanımlanacak.
- Metotların imzası olarak interfaceler kullanılacak.
- Abstract üzerinde soyut ifade olarak interfaceleri tanımlar.
- Concrete üzerinde somut ifade olarak bu interfaceler içinde yer alan metotların içini doldur.

Generic -> Bütününe uygulanacak.
Ekleme-Silme-Güncelleme -> Void

Bu derste DataAccesLayer içindeki Abstract klasörü içine IBlogDal ve ICategoryDal interfacelerini ekledik.

# 15 Ders (Repositorylerin Yazılması)
Bu derste DataAccesLayer içindeki Repositories içine CategoryRepository ve BlogRepository classlarını ekledik.

# 16 Ders (Generic Repository)
Bu derste ilk olarak DataAccesLayer içindeki Abstract klasörü içine new interface IGenericDal ekliyoruz ve ardından Repositories klasörü içine GenericRepository classını ekleyip dolduruyoruz.

# 17 Ders (Business Katmanı Service ve Managerların Yazılması)
BusinessLayer içine Abstract, Concrete ve ValidationRules klasörlerini ekledik ve ardından Abstact klasörü içine new interface ICategoryService ekliyoruz. Daha sonra Concrete içine CategorManager classını ekliyoruz ve implemente ediyoruz. Bu oluşum DRY kod ama öğrenme açısından böyle başladık düzelticez.

# 18 Ders (Business Katmanı Hatalı Validasyonlar)
Bu derste bir takım konu anlatımları dışında DataAccessLayer içine new folder EntityFramework ekliyoruz.

# 19 Ders (Entity Framework Repository)
Bu derste öncelikler DataAccessLayer içindeki Abstract taki interface'leri IGenericDal'dan miras aldırdık. Devamında
IAboutDal, ICommentDal, IContactDal ve IWriterDal interfaceleri oluşturup miras aldırdık.
Daha sonra EntityFramework klasörü içine new class 
-> EfAboutRepository
-> EfBlogRepository
-> EfCategoryRepository
-> EfCommentRepository
-> EfContactRepository
-> EfWriterRepository
ekliyoruz ve gerekli düzenlemeleri yapıyoruz.

# 20 Ders (Category Manager Sınıfında Revizeler Sertifika Görev 1)
Bu derste ilk olarak CategoryManager'ın içini dolduruyoruz. Ardından Presentation katmanına CategoryController ekliyoruz ve sqlde Categories tablosuna bir kaç veri girişi yapıyoruz.

# 21 Ders (Kategorilerin Listelenmesi)
Bu derste CategoryManager'ı olması gerektiği hale getirdikten sonra CategoryController'da Index'in controllerını yazdıktan sonra View ekliyoruz Razor view olarak ve tablo yapısıyla kategorilerin geldiğini görüyoruz.

# 22 Ders (Temanın Projeye Eklenmesi)
21. derste indirdiğimiz temayı layoutlaştırmak için öncelikle _UserLayout adlı viewi Shared dosyasının içine açıyoruz. Ardından çalışıyor mu diye BlogController'ı dahil ediyoruz projeye sorunsuz çalıştığınız görüyoruz.
Ardından templateden aldığımız index ile _UserLayout'u ayarladık.

# 23 Ders (Partial View Await Async)
Bu derste _UserLayout'u partiallara ayrıdık. Hocadan farklı bir yol izledim. İlk olarak Views klasörü içine UserLayoutPartial adlı bir klasör içine de ;
-> HeadPartial
-> LogoPartial
-> TopbarPartial
-> SocialMediaPartial
-> NavbarPartial
-> FooterPartial
viewlerini Partial olarak açıp _UserLayout'ta

@await Html.PartialAsync("/Views/UserLayoutPartial/HeadPartial.cshtml")

kodu ile partialları çağırdık.

# 24 Ders (Blogların Listelenmesi)
Bu derste ilk olarak BusinessLayerda Abstract içine IBlogService ardından Concrete içine BlogManager'ı dahil edip ardından BlogController'a ait index'e templateden aldığımız blog kısmını ekleyip foreach döngüsüne sokuyoruz. Bir kaç blog ekledikten sonra blogların geldiğini gördük.

# 25 Ders (Include Metodu Ve Eager Load)
Bloglarda CategoryName'i getirebilmek için IBlodDal'da

List<Blog> GetListWithCategory();

ardından EfBlogRepository'de

public List<Blog> GetListWithCategory()
        {
            using (var c = new Context())
            {
                return c.Blogs.Include(x => x.Category).ToList();
            }
        }

kodlarını yazıp Repositories'te oluşturulan GenericRepository hariç diğer tüm classlari sildik.

Daha sonra BusinessLayer/Abstract içindeki IBlogService'e

List<Blog> GetBlogListWithCategory();

ve Concrete içindeki BlogManager'de

public List<Blog> GetBlogListWithCategory()
        {
            return _blogDal.GetListWithCategory();
        }

kodlarını ekledik.

# 26 Ders (Read More Ve Tarih Formatı)
Kısa Format Tarih : @(((DateTime)item.xxx).ToString("dd-MMM-yyyy"))
Kısa Format Metin : @item.xxx.Substring(0,item.xxx.Substring(0,130).LastIndexOf(" "))...
Blogların listelendiği kısımda bu kodları kullanarak görsel anlamda güzelleştirme yaptık.

# 27 Ders (Blog Detayları)
BlogController'a BlogDetails Controllerını yazıp index ekledik be single.htmlden istediğimiz kısmı alıp düzenledik.
Daha sonra şartı sorgular için IGenericDal'a

List<T> GetListAll(Expression<Func<T, bool>> filter);

yazıyoruz ve ardından GenericRepository içine

public List<T> GetListAll(Expression<Func<T, bool>> filter)
        {
            using var c = new Context();
            return c.Set<T>().Where(filter).ToList();
        }

ve Business katmanında Concrete içindeki BlogManager'a

public List<Blog> GetBlogByID(int id)
        {
            return _blogDal.GetListAll(x => x.BlogID == id);
        }

kodunu yazdık ve dersi bitirdik.

# 28 Ders (Blog Devamını Oku Sayfası)
Controller'ın adını BlogReadAll olarak değiştiriyoruz ve işlemleri bu değişikliğe göre uyarlıyoruz. Ardından ID'ye göre bilgileri çekiyoruz ve bu çekimi görsel olarak düzeltiyoruz.
Daha sonra CommentController açıyoruz ve içine oluşturduğum 2 parça controller'a ait partial view açıp bu kodları kesip partialviewlere yapıştırıp düzenliyoruz.

# 29 Ders (Yorumlara Ait Metotların Yazılması)
Business katmanına ICommentService ve CommentManager ı projeye dahil edip CommentController'da yazıp partial'da verileri çekiyoruz. Hata altın partialda IEnumarable kullandığımız için onu bir sonraki derste düzelteceğiz.

# 30 Ders (View Component)
Bu derste ilk olarak ViewComponents adlı klasörü UI katmanına ekliyoruz ve içine CommentList classını ekleyip ardından Shared içine Components klasörünü imine CommentList klasörünü içinede Default viewini partial olarak ekliyoruz. Ardından statik olarak gelmesi için model oluşturduk ve IEnumarable ile geldiğini gördük.

# 31 Ders (Bloglara Ait Yorumların Listelenmesi)
Bu derste ilk olarak ViewComponents içine Comment adlı klasörü içine CommentListByBlog adlı classı ekledik ardından Components içine CommentListByBlog adlı klasörü içinede Default adlı viewi ekleyip daha önce yazdığımız PartialCommentList'deki kodları kopyalayıp düzenledik ve sorunsuz bir şekilde geldiğini gördük ve dersi bitirdik.

# 32 Ders (View Component İle Parametre Kullanımı)
Bu derste ilk olarak idye göre yorum getirme işlemi için

public IViewComponentResult Invoke(int id)
        {
            var values = cm.GetList(id);
            return View(values);
        }

olarak id kısmını güncelledik devamında id nin gelmediğini gördük. Ardından

@await Component.InvokeAsync("CommentListByBlog",new {id= ViewBag.ID})

ile ID gönderdik ve oldu. Eğer yorum yoksa yorum yapın ödevinide tamamladım.
Ardından BlogReadAll'da Component yapısıyla Kategorileri getirdik. Ardından bir takım görsel iyileştirmeler yaptık.

# 33 Ders (Httpget Ve Httppost Attributeleri Ve Register İşlemi)
Bu derste register işlemi için LoginController açtık ve içine SingUp cantrollerını yazıp view ekledik ardından templateden istediğimiz yeri kopyalayıp bu view'e yapıştırdık. Devamından Business katmanına IWriterService ve WriterManager'ı dahil edip controller tarafında

[HttpGet]
        public IActionResult SingUp()
        {
            return View();
        }

[HttpPost]
        public IActionResult SingUp(Writer writer)
        {
            return View();
        }

kodlarını yazıp dersi bitirdik.

# 34 Ders (Yazar Kaydı Ve Sweet Alert Kullanımı)
Bu derste ilk olarak yazar kaydı için

[HttpPost]
        public IActionResult SingUp(Writer writer)
        {
            writer.WriterStatus = true;
            writer.WriterAbout = "Deneme";
            if (writer.WriterPassword == writer.WriterConfirmPassword)
            {
                wm.WriterAdd(writer);
                return RedirectToAction("Index", "Blog");
            }
            return View();
        }

controller'ını yazıyoruz ve bu şekilde kaydın gerçekleştiğini gördük. Ardından tüm şartları okudum, kabul ediyorum kısmı için sweet alert kullandık.

# 35 Ders (Fluent Validation Core)
Busines katmanı ve Uı katmanına
-> FluentValidation (10.3.3)
-> FluentValidation.AspNetCore (10.3.3)
paketlerini yüklüyoruz.

BusinessLayer'daki ValidationRules klasörü içine new class WriterValidator açıp kurallarımızı yazıyoruz. Ardından bu kuralların geçerli olması için önce LoginController'da ardından SignUp'da gerekli kodları yazıyoruz. Ardından dersi bitirdik.

# 36 Ders (Login Panelinin Hazırlanması, View Sayfasında Class Atamaları)
Bu derste ilk olarak Validation rule yazılarını kırmızı olarak getirdik. Ardında LoginControllerda signin için bir controller yazarak SignIn sayfasını yaptık ve türkçeleştirdik.

# 37 Ders (Yazarın Diğer Yazıları Ve Yazar Blog İlişkisi)
Bu derste ilk olarak yazara göre blog getirebilmek için blog ile writer tablolarını bağlıyoruz.
Ardından BlogManager'da

public List<Blog> GetBlogListByWriter(int id)
        {
            return _blogDal.GetListAll(x => x.WriterID == id);
        }

kodunu yazıyoruz.
Ardından yazarın son blogları için WriterLastBlog adlı komponenti oluşturup verileri düzeltip dersi bitirdik.

# 38 Ders (Mail Bülteni)
Bu derste ilk olarak mail bülteni için NewsLetter clasını EntityLayer'a ekliyoruz. Buna bağlı olarak DataAccessLayerda ve BusinessLayer'da clat ve interfacelerimizi ekleyip oluşturduğumuz NewsLetterController'ına partial controller ekleyip View açıyoruz ardından bu view'e gerekli kısmı kesip kodunu yazıp çalıştığını görüyoruz ve dersi bitiriyoruz.

# 39 Ders (Mail Bültenine Abone Olma Ve Bloglara Yorum Yapma)
Bu derste ilk olarak mail adresinin sql adresine kayıt olması için controller ve view tarafında gerekli kodları yazıyoruz. 
Ardından daha önce oluşturmuş olduğumuz CommentController da

[HttpPost]
        public IActionResult PartialAddComment(Comment comment)
        {
            comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
            comment.CommentStatus = true;

            cm.CommentAdd(comment);

            return RedirectToAction("BlogReadAll", "Blog", new { id = comment.BlogID });
        }

kısmını güncelleyerek

@await Html.PartialAsync("~/Views/Comment/PartialAddComment.cshtml",new { id = ViewBag.ID }) 

ile ID gönderip

<div class="comment-top">
    <h4>Bir Yorum Bırakın.</h4>
    <div class="comment-bottom">
        <form method="post" asp-action="PartialAddComment" asp-controller="Comment">
            <input type="hidden" name="BlogID" value="@ViewBag.ID" />
            <input class="form-control" type="text" name="CommentUserName" placeholder="İsim Soyisim" required="">
            <input class="form-control" type="email" name="Email" placeholder="E-Posta" required="">

            <input class="form-control" type="text" name="CommentTitle" placeholder="Konu" required="">

            <textarea class="form-control" name="CommentContent" placeholder="Yorumunuz..." required=""></textarea>

            <button type="submit" class="btn btn-primary submit">Gönder</button>
        </form>
    </div>
</div>

ile yorum yaptırma kısmını tamamladık.

# 40 Ders (Status Code Ve 404 Sayfası)
//app.UseStatusCodePages();
app.UseStatusCodePagesWithReExecute("/ErrorPage/Error1", "?code={0}");

kodunu ekleyerek ErrorPageController'ı açıp istediğimiz bir tamplete View yazıp dersi bitirdik.

# 41 Ders (About İşlemleri)
Bu derste ilk olarak AboutController açıp BusinessKatmanına IAboutService ve AboutManagerı dahil edip devamında controllera index ekledik. Daha sonra bu indexe templateden istediğimiz kısmı kopyaladık ve sqle veri girdikten sonra verileri çektik.

# 42 Ders (Contact Sayfası)
Contact sayfası için öncelikle ContactController'ı ardından IContactService ve ContactManager'ı busines katmanına dahil ediyoruz. Devamında Contact controller'da yazdığımız HttpGet ve HttpPost için View ekleyip Templateden gerekli kısmı kendimiz için alıp form kısmında name'leri tabloya uygun doldurum verilerin geldiğini görünce dersi bitriyoruz.

# 43 Ders (Vitrinde Revizeler)
Navbar linkleri verildi
Topbar linkleri verildi
Footer türkçeleştirmesi yapıldı.

# 44 Ders (Authentication Ve Controller Seviyesinde Authorize)
Authorize:Yetkilendirme alanları. Giriş yapmamış kişileri engelleme için kullanılan ettiribüttür. [Authorize] ile safyayı kitliyoruz.

WriterController adlı bir controller açtık eğer bu Authorize adlı kodu sadece controllerın üstüne yazarsak o controller çalışmaz otantike olmadan. Ama namespace nin bir altına yazarsak hepsi kitlenir.

# 45 Ders (Proje Seviyesinde Authorize Ve Startup.Cs Configure Service)

Bu derste ilk olarak startup'ta

services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder()
                .RequireAuthenticatedUser()
                .Build();
                config.Filters.Add(new AuthorizeFilter(policy));
            });

kodu ile proje seviyesin Authorize yazmış olduk.
Ardından bu giriş işleminin etkisin olması için istenilen controllera [AllowAnonymous] kodunu yazıyoruz.

# 46 Ders (Session İle Oturum Yönetimi)
Bu derste öncelikle SignIn safyasının httpget ve post kısım larını 

[HttpGet]
        public IActionResult SignIn()
        {
            return View();
        }

        [HttpPost]
        public IActionResult SignIn(Writer writer)
        {
            Context context = new Context();
            var dataValue = context.Writers.FirstOrDefault(x => x.WriterMail == writer.WriterMail && x.WriterPassword == writer.WriterPassword);

            if (dataValue != null)
            {
                HttpContext.Session.SetString("username", writer.WriterMail);
                return RedirectToAction("Index", "Writer");
            }

            else
            {
                return View();
            }
        }

olarak yazıp ardından startup'a

services.AddSession();
app.UseSession();

kodlarını yazdık devamında giriş yaptık ama hata sayfası geldi.

# 47 Ders (Authorize ile Return Login Url)
startup'ta aşağıdaki kodlarla artık hata yerine Login sayfasına yönlendirecek.

 app.UseAuthentication();


 services.AddMvc();
            services.AddAuthentication(
                CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(x =>
                {
                    x.LoginPath = "/Login/SignIn/";
                });

            services.ConfigureApplicationCookie(options =>
            {
                // Cookie Settings
                options.Cookie.HttpOnly = true;
                options.ExpireTimeSpan = TimeSpan.FromMinutes(5);

                options.LoginPath = "/Login/SignIn/";
                options.SlidingExpiration = true;
            });

# 48 Ders (Login İşlemi)
Bu derste startupta

 app.UseAuthentication();

kodunu yazdıktan sonra LoginController'ı

 [HttpPost]
        public async Task<IActionResult> SignIn(Writer writer)
        {
            Context context = new Context();
            var datavalue = context.Writers.FirstOrDefault(x => x.WriterMail == writer.WriterMail && x.WriterPassword == writer.WriterPassword);

            if (datavalue != null)
            {
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name,writer.WriterMail)
                };

                var useridentity = new ClaimsIdentity(claims, "a");
                ClaimsPrincipal principal = new ClaimsPrincipal(useridentity);
                await HttpContext.SignInAsync(principal);
                return RedirectToAction("Index", "Blog");
            }

            else
            {
                return View();
            }
        }

bu şekilde güncelledik ve ardından otantike olduk artık her sayfaya gidebiliyoruz.
Startupdta services.AddSession(); kodunu kaldırdık.

# 49 Ders (Footer Last 3 Post)
Bu derste öncelikle BusinessLayerDa BlogManager'a

public List<Blog> GetLast3Blog()
        {
            return _blogDal.GetListAll().Take(3).ToList();
        }

kodunu yazıp ardından ViewComponents/Blog içine BlogLast3Post classını dahil edip component yapısını kuruyoruz ardından Component klasörüne partial viewi ekledikten sonra gerekli yeri kesip uzantısını veriyoruz. Daha sonra son 3 postun geldiğini görüyoruz bu şekilde.

# 50 Ders (Yazar Paneli Tema Dosyası)
Bu derste hocanın paylaşmış olduğu writer template'i indirdik ve WriterControllerDa test adlı kısmı yazdıktan sonra Shared klasöü içine _WriterLayout adlı viewi ekledik. Devamında Test adlı controllera view ekleyip layoutunu oluşturduğumuz writerlayout seçtik. Devamında templateden aldığımız kısmın kalıcı olmasını istediğimiz kısmını bu layoutta bırakıp diğer kısımları sildik ve dersi bitirdik.

# 51 Ders (Yazar Navbar Düzenlemeleri)
Bu derste WriterLayoutPArtial adlı controllerı açıp writerlayoutu için  Head, sidebar ve footer için partial oluşturduk. 

# 52 Ders (Yazar Üst Menü View Components)
Bu derste writer layout için mesaj ve bilgirim kısmına componentleme yaptık.

# 53 Ders (Refactoring Ve Generic Service Yapıları)
Bu derste Business katmanı abstract klasörüne IGenericService'i dahil edip diğer service'leri kalıtım yoluyla miras bırakıp Manager tarafında da implement ediyoruz. Bu diğer tüm tablolar için yapıp isimden dolayı hata veren yerlri düzeltiyoruz.

# 54 Ders (Yazarın Kendine Ait Blog Listesi)
Bu derste blogcontroller'a yazdığımız BlogListByWriter adlı kontroller'a layoutu WriteLayout olan bir view ekleyip içine templateden aldığım tablo yapısını kuruyoruz. Verilerin geldiğini görüp dersi bitiriyoruz.

# 55 Ders (Yazarın Yeni Blog Eklemesi)
Bu derste ilk olarak Blog Contoller içine BlogAdd adlı controller'ı oluşturuyoruz ardından içine Blog için Validation kurallarını yazıyoruz.

[HttpGet]
        public IActionResult BlogAdd()
        {
            return View();
        }

        [HttpPost]
        public IActionResult BlogAdd(Blog blog)
        {
            BlogValidator bv = new BlogValidator();
            ValidationResult results = bv.Validate(blog);

            if (results.IsValid)
            {
                blog.BlogStatus = true;
                blog.BlogCreatDate = DateTime.Parse(DateTime.Now.ToString());
                blog.WriterID = 1;

                bm.TAdd(blog);
                return RedirectToAction("BlogListByWriter", "Blog");
            }

            else
            {
                foreach (var item in results.Errors)
                {
                    ModelState.AddModelError(item.PropertyName, item.ErrorMessage);
                }
            }

            return View();
        }

controller'ı bu şekilde yazdıktan sonra View ekleyip form yapısını kuruyoruz. asp-for ile kimin için olduğunu söyleyip verileri kaydettirdik.


