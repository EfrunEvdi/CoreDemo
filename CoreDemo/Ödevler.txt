List ve ICollection arasındaki fark nedir?
"ICollection" bir interface iken "List" ise bir class tır. "ICollection", aralarında "List" de bulunan ve "ICollection" interface'ini implemente eden herhangi bir classı veya bu classlardan türetilen herhangi bir classı alabilirken, "List" sadece kendini ve List den türetilen sınıfları kabul eder.

DRY nedir?
DRY (Don’t Repeat Yourself) prensibine göre kod içindeki her parçacığın kendine özelleştirilmiş bir yapısı, görevi olmalıdır. Aksi halde bir değişiklik yapılması gerektiğinde o parçadan etkilenen diğer parçalarda da değişiklik yapılması gerekir ki bu da çoğu zaman karmaşıklığa sebep olur. Kod tekrarından kaçınılmalı, tekrarlamalar soyutlama yolu ile aşılmalıdır.

20. Video: Projeyi GitHuba yüklemek.
Projeyi GitHub'a yükledim.

--EfCategoryRepository'i kullanmamızdaki dezavantaj Entity Framework'e bağımlı olmamız. İlerde başka bir teknoloji geldiğinde projeyi ona geçirmek için neredeyse bütün katmanlardaki kodları tek tek değiştirmemiz gerekir ama interface kullanarak bu bağımlılığı yok eder ve istersek ileride daha farklı teknolojilere geçebiliriz. Avantaj olaraksa kısa vadede daha az kod yazıp daha kısa sürede projeyi bitirebiliriz.

Eager Loading: nesneyi ihtiyaç anından hemen önce oluşturur ve bekletir. Linq sorgusu çalıştırıldığında verilerin tamamını yükler ve hafızaya alır. Daha ucuz maliyetlidir.
Lazy Loading : Bu yöntemde veriler sorguya bağlı olarak çekilir ancak veri setinin içindeki tüm dataları yüklemek yerine verilerin çağrıldıkça otomatik yüklenmesi söz konusudur. Daha pahalı işlemdir.

30. Video: View Component ile Partial view arasındaki fark araştırılacak.(Videonun yorumlarında cevaplar var)
Kullanım amacı olarak birebir aynı olan bu iki yapının birbirinden ayrılmasını sağlayan özelliği View Component tarafında server tarafa daha az yük bindirilmesinin amaçlanmış olmasıdır. Partial View içerisinde tanımlanan bir method local function olarak kullanılır.Bu methodların dışarıdan bire bire tetiklenmesi ve kullanılması mümkün değildir.
Örnek:“Customer listemiz var ve her eklenen datadan sonra listenin anlık olarak güncellenmesini ve bu güncelleme sırasında zaman kaybı olmadan yapılmasını istiyoruz”.

Çözüm:“Bahsettiğim mevcut durumun üstesinden gelmek için CustomerController içerisinde PartialViewResult dönen bir method yazılır. Method ajax ile tetiklenir ve dönen Partial append edilir.Bunun gibi bir çok durumda benzer süreçler işlemektedir.

Buda uygulamanın Controller ile çok fazla haberleşmesini ve bu neticede performans kayıplarını beraberinde getirmektedir. View Component yapısının tamda bu noktada Partial View yapısındaki bu dezavantajı ortadan kaldırmaktadır.

Asp.Net Core ile birlikte gelen View Componentleri WebForms ile kullanılan UserControl veya MVC ile kullandığımız Partial View yapılarına benzetebiliriz. Web uygulamalarımızda birden fazla alanda kullanmak istediğimiz viewlerimiz için ViewComponent’i tercih edebiliriz.

MVC’nin önceki sürümlerinde birden fazla alanda kullanmak istediğimiz bileşenleri genellikle Partial View olarak tasarlar ve [ChildActionOnly] attribute ile birlikte tek başlarına çağrılmalarını engellerdik. Bu yapı bizim için büyük kolaylık sağlardı. Asp.Net Core ile birlikte [ChildActionOnly] attribute kullanımı kaldırılmış ve yeni ViewComponent yapısı geliştirilmiştir. ViewComponentler dışarıdan Http istek ile doğrudan ulaşılamazlar.

32 Video: Eğer Blogta Hiç Yorum yoksa ilk yorumu siz yazın diye yazdırılacak.

33. Video: Kayıt Olurken Parolanın 2 kez girilip onaylanması.

34. Video: Kayıt olma sayfasında değerlerini view modelde tutucağımız bir şehir seçimi

Controller:
public IActionResult Index()
        {
            var model = new ViewModel();
            model.Sehirler = new List<SelectListItem>();
            model.Sehirler.Add(new SelectListItem() { Text = "İstanbul", Value = "1", Selected = false });
            model.Sehirler.Add(new SelectListItem() { Text = "Ankara", Value = "2", Selected = false });
            model.Sehirler.Add(new SelectListItem() { Text = "İzmir", Value = "3", Selected = false });
            model.Sehirler.Add(new SelectListItem() { Text = "Diğer", Value = "4", Selected = false });
            return View(model);
        }

View Model: 
public class ViewModel
    {
        public string Sehir { get; set; }
        public IList<SelectListItem> Sehirler { get; set; }

    }

Index View: 
@using (Html.BeginForm("Index", "RegisterController", FormMethod.Post))
                        {
                            <div class="form-group col-md-6">
                                <label for="validationCity mb-2">Şehir Seçiniz</label>
                                <br />
                                <label>
                                    @if (Model != null)
                                    {
                                        @Html.DropDownListFor(m => m.Sehir, Model.Sehirler);
                                    }
                                </label>

                            </div>
                        }


35. Video: Fluent Validationda Kullanıcının parolası en az bir büyük harf, en az bir küçük harf ve en az 1 sayı olacak.
RuleFor(x => x.WriterPassword).NotEmpty().WithMessage("Şifre Boş Geçilemez")
                .MinimumLength(8).WithMessage("Şifre 8 karakterden küçük olamaz.")
                .MaximumLength(16).WithMessage("Şifre 16 karakterden büyük olamaz.")
                .Matches(@"[A-Z]+").WithMessage("Şifrede en az bir büyük harf olmalıdır.")
                .Matches(@"[a-z]+").WithMessage("Şifrede en az bir küçük harf olmalıdır.")
                .Matches(@"[0-9]+").WithMessage("Şifrede en az bir rakam olmalıdır");

39. Video Yorum ve Bülteni ekleme sorununun giderilmesi

40. Video Github Repoları güncellendi

48. Video: ClaimsIdentity'de 2. parametre neden verilmeli ? Araştırılacak.
Authentication="kimlik doğrulaması"
Authorization="kimlik yetkilendirme"
Claim=""kullanıcı hakkında bilgiler tutan yapılar diyebiliriz."
Kısaca Claim anlatmamız gerekirse Örneğin:Youtobe'a giriş yaptık ve Youtobe bize izleyici rolü tanımladı,bu tanımlama ile beraber istediğmiz video'yu izleyebiliyoruz.Ama diyelim ki yaşımız 18'den küçük ve bazı korku gerilim videoları +18 sınır konulması gerekiyor,İşte burada yaş aralığını ölçebilmek için ilgili kullanıcıların yaş değerlerinin claim olarak atanması sağlanmalı ve claim bazlı bir yetkilendirme yapılmalıdır.

52. Video: Mesajların 24 saatlik dilim içinde gönderilmiş ise ne kadar süre önce gönderildiği yazdırılacak.(?)

54. Video: Yazar panelinde Purple logosu yerine kendi blogunuzun logosunu koyun.

56. Video
Ödev
Selected = seçilen değeri getirir ekrana yansıtır
örnek olarak (x.CategoryId = 2 ? true : false), x den gelen CategoryId eşitse ikiye true olucak yani seçili olarak ekrana yansısın

Disabled = değeri pasif yapar yani seçim yaptırmaz
kullanımı ise (x.CategoryId = 1 ? true : false), x den gelen CategoryId eşite bire true olucak yani gelen değeri bize seçtirmiyecek. Projeyi çalıştırdığımızda değeri gri tonda görücez ve üzerine geldiğimizde seçim yapamıyacağız.

Group = adından da anlaşıldığı gibi gruplama işlemlerinde kullanılıyor.
Örnek olarak 2 kategorimizin oldugunu dusunelim yazılım ve oyun. Yazılım ve Oyun başlıkları altında bloglar listeleniyor işlem tam olarak böyle oluyor. Başlıklar koyu olarak belirtilir.

57. Video: Durum kısmında true yerine aktif false yerine pasif yazdırılacak.

Ödev : Blog silme işlemi yapmadan önce bir tane pop-up yada mesaj açılsın ve gerçekten silmek istediğinizden emin misiniz ? Diye sorsun.

63. Video: Col
Bootstrap sisteminin sunmuş olduğu kolon(Izgara) sistemidir.  Sayfa normalde 12 eşit parçaya bölünür.  Bu parçalardan kaç tanesini kullanmak istiyorsanız ona göre değer girebilirsiniz.
col-sm  |   col-md   |  col-lg   | col-xl   gibi ayrımları vardır. Bu sistemle beraber tüm cihazlarda nasıl görünmesini istiyorsanız o şekilde ayarlayabilirsiniz.
Örneğin  class="col-xl-6 col-sm-12" dediğinizde yüksek çözünürlülüklü bilgisayar ekranında alanın yarısını alırken telefon veya tablet gibi cihazlarda alanın tamamını kaplar.

68. Video : Writer template i için logo